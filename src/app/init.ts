import { ArticleManager } from '@/utils/articleManager'
import { ArticleScheduler } from '@/utils/scheduler'

let isInitialized = false

export async function initializeArticleSystem() {
  if (isInitialized) {
    console.log('Article system already initialized')
    return
  }

  try {
    console.log('üöÄ Initializing Wordle Hint Pro Article System...')
    
    // Initialize article manager
    const articleManager = ArticleManager.getInstance({
      autoGenerateDaily: true,
      enableCaching: true,
      maxRetries: 3
    })
    
    await articleManager.initialize()
    console.log('‚úÖ Article manager initialized')
    
    // Initialize and start scheduler
    const scheduler = ArticleScheduler.getInstance({
      enableDailyGeneration: true,
      generationTime: '00:01', // 12:01 AM
      enableCacheCleanup: true,
      cacheCleanupInterval: 6 // 6 hours
    })
    
    await scheduler.start()
    console.log('‚úÖ Article scheduler started')
    
    // Log system status
    const status = await articleManager.getStatus()
    const schedulerStatus = scheduler.getStatus()
    
    console.log('üìä System Status:')
    console.log(`   - Articles: ${status.totalArticles}`)
    console.log(`   - Today's Word: ${status.todayWord || 'Not set'}`)
    console.log(`   - Scheduler: ${schedulerStatus.isRunning ? 'Running' : 'Stopped'}`)
    console.log(`   - Next Generation: ${schedulerStatus.nextDailyRun || 'Not scheduled'}`)
    
    isInitialized = true
    console.log('üéâ Article system initialization completed successfully!')
    
  } catch (error) {
    console.error('‚ùå Failed to initialize article system:', error)
    throw error
  }
}

// Auto-initialize when this module is imported
if (typeof window !== 'undefined') {
  // Client-side initialization
  initializeArticleSystem().catch(console.error)
} else {
  // Server-side initialization
  console.log('üñ•Ô∏è Server-side environment detected, skipping auto-initialization')
}

export { ArticleManager, ArticleScheduler } 